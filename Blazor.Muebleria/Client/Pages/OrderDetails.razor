@page "/orderDetails"
@inject IProductCategoryService ProductCategoryService
<p>@Message</p>
<h3>OrderDetails</h3>

@if(productCategories != null && order != null)
{
	<label>Categorias</label>
	<EditForm Model="@order">
		<InputSelect class="form-control col-5" 
				Value="@order.ProductCategoryId"
				ValueChanged ="@((int categoryId) =>ProductCategoryHasChanged(categoryId))"
				ValueExpression="@(()=> order.ProductCategoryId)">
			@foreach (var item in productCategories)
			{
				<option value="@item.Id">@item.Name</option>
			}
		</InputSelect>
	</EditForm>
	<label>Productos</label>
	<EditForm Model="@order">
		<InputSelect class="form-control col-5" @bind-Value="@productId">
			@foreach (var item in products)
			{
				<option value="@item.Id">@item.Name</option>
			}
		</InputSelect>
	</EditForm>
}
else
{
	<p><em>Cargando Categorias...</em></p>
}


@code {
	public Order order;
	public IEnumerable<ProductCategory> productCategories;
	public IEnumerable<Product> products;
	public int productId { get; set; }
	public string Message { get; set; }

	protected async override Task OnInitializedAsync()
	{
		try
		{
			order = new Order() { ProductCategoryId = 1};
			productCategories = await ProductCategoryService.GetProductCategories();
			await LoadProducts(order.ProductCategoryId);
		}
		catch(Exception ex)
		{
			Message = "Ha ocurrido un error..." + ex.Message;
		}
	}

	protected async Task ProductCategoryHasChanged(int categoryId)
	{
		order.ProductCategoryId = categoryId;

		if (order.ProductCategoryId > 0)
			await LoadProducts(order.ProductCategoryId);
	}

	private async Task LoadProducts(int categoryId)
	{
		// products = await 
	}
}
